{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","minLength","isEmail","valid","shouldValidate","touched","password","isSignUp","switchAuthModeHandler","setState","prevState","inputChangedHandler","event","controlName","updatedControls","target","checkValidlity","submitHandler","preventDefault","props","onAuth","this","buildingBurger","authRedirectPath","onSetRedirectAuthPath","formElementsArray","key","push","id","config","form","map","formElement","Invalid","changed","loading","errorMessage","error","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.566ccb32.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2O073\"};","import React, { Component } from 'react';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner'; \r\nimport {Redirect} from 'react-router-dom';\r\nimport { checkValidlity } from '../../store/utility';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value:'',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 3,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                shouldValidate: true,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value:'',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6,\r\n                },\r\n                valid: false,\r\n                shouldValidate: true,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignUp: true\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\r\n            this.props.onSetRedirectAuthPath();\r\n        }\r\n    }\r\n\r\n\r\n    switchAuthModeHandler = () =>{\r\n        this.setState(prevState => {\r\n            return {isSignUp: !prevState.isSignUp}\r\n        })\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: checkValidlity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        }\r\n     \r\n        this.setState({controls: updatedControls})\r\n    }\r\n\r\n  \r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for(let key in this.state.controls){\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key],\r\n            })\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input \r\n                key={formElement.id} \r\n                elementType={formElement.config.elementType} \r\n                elementConfig={formElement.config.elementConfig} \r\n                value={formElement.config.value}\r\n                Invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.shouldValidate}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n            />\r\n\r\n        ));\r\n\r\n        if(this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n        \r\n        let errorMessage = null;\r\n        \r\n        if(this.props.error){\r\n            errorMessage = (\r\n            <p>{this.props.error}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirect} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button \r\n                clicked={this.switchAuthModeHandler}\r\n                btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirect: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetRedirectAuthPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    if(props.Invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n    switch(props.elementType) {\r\n        case('input'):\r\n            inputElement = <input className={inputClasses.join(' ')} \r\n            {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} \r\n            {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case('select'):\r\n            inputElement = (\r\n            <select \r\n                className={inputClasses.join(' ')} \r\n                value={props.value} onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value} >\r\n                            {option.displayValue} \r\n                        </option>\r\n                    ))}\r\n            </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input className={inputClasses.join(' ')} \r\n            {...props.elementConfig} value={props.value} onChange={props.changed}/>;\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2ka1K\",\"Label\":\"Input_Label__Sqe3P\",\"InputElement\":\"Input_InputElement__39Qvc\",\"Invalid\":\"Input_Invalid__206g3\"};"],"sourceRoot":""}