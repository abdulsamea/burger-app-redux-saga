{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinue","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","shouldValidate","touched","street","zipCode","country","email","deliveryMethod","options","displayValue","loading","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidlity","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","Invalid","changed","disabled","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinueHandler","replace","summary","to","purchaseRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.4207aadb.chunk.js","sourcesContent":["import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css'\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{ width: '100%', margin: 'auto' }}>\r\n            <Burger ingredients={ props.ingredients }/>\r\n            </div>\r\n            <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button btnType=\"Success\" clicked={props.checkoutContinue}>CONTINUE</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","import React, {Component} from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport {connect} from 'react-redux';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { checkValidlity } from '../../../store/utility';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value:'',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 3\r\n                },\r\n                valid: false,\r\n                shouldValidate: true,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value:'',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                shouldValidate: true,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Zip Code'\r\n                },\r\n                value:'',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5\r\n                },\r\n                valid: false,\r\n                shouldValidate: true,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your country'\r\n                },\r\n                value:'',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                shouldValidate: true,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-mail'\r\n                },\r\n                value:'',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                shouldValidate: true,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: true,\r\n                value: 'cheapest',\r\n                shouldValidate: false\r\n            }\r\n        },\r\n        loading: false,\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        const formData= {};\r\n        for(let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n        this.props.onOrderBurger(order, this.props.token);\r\n    }\r\n    \r\n    inputChangedHandler = (event, inputIdentifier) =>{\r\n        const updatedOrderForm = {\r\n            ...this.state.orderForm\r\n        };\r\n        const updatedFormElement = {\r\n            ...updatedOrderForm[inputIdentifier]\r\n        };\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = checkValidlity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n        \r\n        let formIsValid = true;\r\n        for(let inputIdentifier in updatedOrderForm){\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n    }\r\n\r\n    render(){\r\n        const formElementsArray = [];\r\n        for(let key in this.state.orderForm){\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key],\r\n            })\r\n        }\r\n        let form =(\r\n                <form onSubmit={this.orderHandler}>\r\n                   {formElementsArray.map(formElement => (\r\n                        <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType} \r\n                        elementConfig={formElement.config.elementConfig} \r\n                        value={formElement.config.value}\r\n                        Invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.shouldValidate}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\r\n                    ))}\r\n                    <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n                </form>\r\n        );\r\n        if (this.props.loading){\r\n            form = <Spinner />\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your contact data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, {Component} from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport ContactData from './ContactData/ContactData';\r\nimport {connect} from 'react-redux';\r\n\r\nclass Checkout extends Component{\r\n\r\n    // componentWillMount () {\r\n    //     this.props.onInitPurchase();\r\n    // }\r\n    // state = {\r\n    //     ingredients: null,\r\n    //     totlaPrice: 0\r\n    // }\r\n\r\n    // componentWillMount() {\r\n    //     const query = new URLSearchParams(this.props.location.search);\r\n    //     const ingredients = {};\r\n    //     let price = 0;\r\n    //     for (let param of query.entries()){\r\n    //         if(param[0] === 'price'){\r\n    //             price= param[1];\r\n    //         }\r\n    //         else{\r\n    //         ingredients[param[0]] = +param[1];\r\n    //         }\r\n    //     }\r\n    //     this.setState({ingredients: ingredients, totlaPrice: price});\r\n    // }\r\n\r\n    \r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinueHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n\r\n    render() {\r\n        let summary  = <Redirect to=\"/\" />\r\n        if(this.props.ings) {\r\n            const purchaseRedirect = this.props.purchased ? <Redirect to=\"/\"/> : null;\r\n           summary = (\r\n            <div>\r\n                {purchaseRedirect}\r\n                <CheckoutSummary \r\n                ingredients={this.props.ings} \r\n                checkoutCancelled={this.checkoutCancelledHandler}\r\n                checkoutContinue={this.checkoutContinueHandler}/>\r\n                <Route path={this.props.match.path + '/contact-data'} \r\n                component={ContactData}/>\r\n            </div>\r\n           ); \r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onInitPurchase: () => dispatch(actions.purchaseInit())\r\n//     }\r\n// }\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    if(props.Invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n    switch(props.elementType) {\r\n        case('input'):\r\n            inputElement = <input className={inputClasses.join(' ')} \r\n            {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} \r\n            {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case('select'):\r\n            inputElement = (\r\n            <select \r\n                className={inputClasses.join(' ')} \r\n                value={props.value} onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value} >\r\n                            {option.displayValue} \r\n                        </option>\r\n                    ))}\r\n            </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input className={inputClasses.join(' ')} \r\n            {...props.elementConfig} value={props.value} onChange={props.changed}/>;\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2ka1K\",\"Label\":\"Input_Label__Sqe3P\",\"InputElement\":\"Input_InputElement__39Qvc\",\"Invalid\":\"Input_Invalid__206g3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__Xtp0W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2Vb16\"};"],"sourceRoot":""}